{"/":{"title":"Yamify Documentation","data":{"":"Yamify is a modern web application built with Next.js, React, and TypeScript. This documentation provides comprehensive information about the project architecture, setup instructions, development guidelines, and more.","what-is-yamify#What is Yamify?":"Yamify is a web application designed to [brief description of what Yamify does]. It leverages the latest web technologies to provide a seamless user experience.","key-features#Key Features":"[Feature 1]\n[Feature 2]\n[Feature 3]\n[Feature 4]","getting-started#Getting Started":"To get started with Yamify, check out the following sections:\nInstallation\nProject Structure\nDevelopment Guidelines","for-contributors#For Contributors":"If you're interested in contributing to Yamify, please read our contribution guidelines.","support#Support":"If you need help or have questions about Yamify, please contact us or raise an issue on our GitHub repository."}},"/getting-started":{"title":"Getting Started with Yamify","data":{"":"Welcome to Yamify! This guide will help you get up and running with Yamify in your project. Follow these steps to install Yamify, understand its core concepts, and build your first feature.","prerequisites#Prerequisites":"Before you begin, make sure you have the following installed:\nNode.js (v18.0.0 or later)\nnpm (v8.0.0 or later) or yarn (v1.22.0 or later)\nGit","installation#Installation":"","creating-a-new-yamify-project#Creating a New Yamify Project":"The easiest way to get started is using the Yamify CLI to create a new project:\nnpx create-yamify-app my-yamify-project\ncd my-yamify-project\nThis will set up a new Yamify project with all the necessary dependencies and configuration.","adding-yamify-to-an-existing-project#Adding Yamify to an Existing Project":"If you want to add Yamify to an existing Next.js project, you can install the required packages:\nnpm install @yamify/core @yamify/ui @yamify/hooks\n# or\nyarn add @yamify/core @yamify/ui @yamify/hooks\nThen, add the Yamify provider to your application:\n// In _app.tsx or app/layout.tsx\nimport { YamifyProvider } from '@yamify/core';\nexport default function App({ Component, pageProps }) {\n  return (\n    <YamifyProvider>\n      <Component {...pageProps} />\n    </YamifyProvider>\n  );\n}","project-structure#Project Structure":"A typical Yamify project has the following structure:\nmy-yamify-project/\n├── public/              # Static files\n├── src/\n│   ├── app/             # App Router pages and layouts\n│   ├── components/       # Reusable components\n│   │   ├── ui/          # UI components\n│   │   └── layout/      # Layout components\n│   ├── hooks/           # Custom React hooks\n│   ├── lib/             # Utility functions and libraries\n│   ├── services/        # API services\n│   └── theme/           # Theme configuration\n├── .eslintrc.js         # ESLint configuration\n├── .gitignore           # Git ignore file\n├── next.config.js       # Next.js configuration\n├── package.json         # Project dependencies\n├── tailwind.config.js   # TailwindCSS configuration\n├── tsconfig.json        # TypeScript configuration\n└── README.md            # Project documentation","core-concepts#Core Concepts":"","1-component-system#1. Component System":"Yamify is built around a component-based architecture. Components are organized into these categories:\nUI Components: Buttons, cards, inputs, etc.\nLayout Components: Containers, grids, flexbox layouts\nForm Components: Form controls, inputs, selects, etc.\nSee the UI Components, Layout Components, and Form Components documentation for details.","2-authentication#2. Authentication":"Yamify provides a complete authentication system with JWT support, OAuth integration, and secure token management. Learn more in the Authentication documentation.","3-api-integration#3. API Integration":"Yamify includes utilities for interacting with backend APIs, including request handling, error management, and data fetching. See the API Endpoints documentation.","4-theming#4. Theming":"Customize the look and feel of your Yamify application using the powerful theming system. Learn more in the Theming documentation.","your-first-yamify-page#Your First Yamify Page":"Let's create a simple page that displays a list of projects:\n// src/app/projects/page.tsx\nimport { Card, Heading, Text, Button } from '@yamify/ui';\nimport { Container, Grid } from '@yamify/ui/layout';\nimport { useProjects } from '@/hooks/useProjects';\nexport default function ProjectsPage() {\n  const { projects, loading, error } = useProjects();\n  \n  if (loading) return <div>Loading projects...</div>;\n  if (error) return <div>Error loading projects: {error.message}</div>;\n  \n  return (\n    <Container>\n      <div className=\"py-6\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <Heading level={1}>My Projects</Heading>\n          <Button variant=\"solid\" colorScheme=\"primary\">New Project</Button>\n        </div>\n        \n        <Grid columns={{ base: 1, md: 2, lg: 3 }} gap={6}>\n          {projects.map((project) => (\n            <Card key={project.id}>\n              <Heading level={3}>{project.name}</Heading>\n              <Text className=\"mt-2 text-gray-600\">{project.description}</Text>\n              <div className=\"mt-4\">\n                <Button variant=\"outline\" size=\"sm\">View Details</Button>\n              </div>\n            </Card>\n          ))}\n        </Grid>\n      </div>\n    </Container>\n  );\n}","authentication-example#Authentication Example":"Here's how to implement a login form using Yamify components:\n// src/app/login/page.tsx\nimport { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Card, Heading, Button, Input, FormControl, FormLabel } from '@yamify/ui';\nimport { useAuth } from '@/hooks/useAuth';\nexport default function LoginPage() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const { login } = useAuth();\n  const router = useRouter();\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError('');\n    \n    try {\n      await login(email, password);\n      router.push('/dashboard');\n    } catch (err) {\n      setError('Invalid email or password');\n    }\n  };\n  \n  return (\n    <div className=\"flex justify-center items-center min-h-screen bg-gray-50\">\n      <Card className=\"w-full max-w-md p-8\">\n        <Heading level={2} className=\"mb-6 text-center\">Log in to Yamify</Heading>\n        \n        {error && (\n          <div className=\"mb-4 p-3 bg-error-50 text-error-700 rounded\">\n            {error}\n          </div>\n        )}\n        \n        <form onSubmit={handleSubmit}>\n          <FormControl className=\"mb-4\">\n            <FormLabel htmlFor=\"email\">Email</FormLabel>\n            <Input \n              id=\"email\"\n              type=\"email\" \n              value={email} \n              onChange={(e) => setEmail(e.target.value)} \n              required \n            />\n          </FormControl>\n          \n          <FormControl className=\"mb-6\">\n            <FormLabel htmlFor=\"password\">Password</FormLabel>\n            <Input \n              id=\"password\"\n              type=\"password\" \n              value={password} \n              onChange={(e) => setPassword(e.target.value)} \n              required \n            />\n          </FormControl>\n          \n          <Button type=\"submit\" variant=\"solid\" colorScheme=\"primary\" className=\"w-full\">\n            Log In\n          </Button>\n        </form>\n      </Card>\n    </div>\n  );\n}","api-integration-example#API Integration Example":"Here's how to fetch data from the Yamify API:\n// src/hooks/useProjects.ts\nimport { useState, useEffect } from 'react';\nimport { fetchApi } from '@yamify/core';\nexport function useProjects() {\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  \n  useEffect(() => {\n    async function loadProjects() {\n      try {\n        setLoading(true);\n        const response = await fetchApi('/projects');\n        setProjects(response.data.projects);\n        setError(null);\n      } catch (err) {\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    }\n    \n    loadProjects();\n  }, []);\n  \n  return { projects, loading, error };\n}","running-your-application#Running Your Application":"Start your development server with:\nnpm run dev\n# or\nyarn dev\nYour Yamify application will be available at http://localhost:3000.","next-steps#Next Steps":"Now that you've got your Yamify application up and running, here are some next steps to explore:\nLearn about UI Components to build rich interfaces\nUnderstand how to use API Endpoints\nCustomize your application with Theming\nSet up authentication with Authentication\nExplore the Architecture behind Yamify","troubleshooting#Troubleshooting":"","common-issues#Common Issues":"","module-not-found-errors#\"Module not found\" errors":"If you encounter module not found errors, make sure all dependencies are properly installed:\nnpm install\n# or\nyarn install\nAlso check your import paths and ensure they match your project structure.","styling-issues#Styling issues":"If your components don't look as expected, ensure TailwindCSS is properly configured:\nCheck that your tailwind.config.js file is correctly set up\nMake sure the Tailwind directives are included in your CSS\nVerify that the @yamify/ui package is correctly imported","getting-help#Getting Help":"If you encounter any issues or have questions:\nCheck the FAQ for common questions\nJoin our Discord community for real-time help\nOpen an issue on GitHub\nContact us through our support channels","community-resources#Community Resources":"GitHub Repository\nDiscord Community\nYouTube Tutorials\nCommunity Examples"}},"/getting-started/installation":{"title":"Installation Guide - Yamify","data":{"":"This guide will walk you through the process of setting up Yamify for local development.","prerequisites#Prerequisites":"Before installing Yamify, ensure you have the following installed on your system:\nNode.js (v18.0.0 or later)\nnpm (v8.0.0 or later) or yarn (v1.22.0 or later)\nGit","clone-the-repository#Clone the Repository":"git clone https://github.com/yamify-org/yamify.git\ncd yamify","install-dependencies#Install Dependencies":"Using npm:\nnpm install\nOr if you prefer yarn:\nyarn install","environment-setup#Environment Setup":"Create a .env.local file in the root directory of the project\nCopy the contents from .env.example to .env.local\nUpdate the environment variables as needed\ncp .env.example .env.local","start-the-development-server#Start the Development Server":"npm run dev\nOr with yarn:\nyarn dev\nThe application should now be running at http://localhost:3000.","building-for-production#Building for Production":"To create a production build:\nnpm run build\nnpm run start\nOr with yarn:\nyarn build\nyarn start","troubleshooting#Troubleshooting":"If you encounter any issues during installation, check the following:\nEnsure you have the correct Node.js version installed\nCheck if all dependencies were installed correctly\nVerify that your environment variables are set properly\nIf problems persist, please raise an issue on our GitHub repository or check the support section for additional help."}},"/architecture/project-structure":{"title":"Project Structure - Yamify","data":{"":"This page provides an overview of Yamify's project structure, explaining the purpose of each directory and the organization of the codebase.","root-directory#Root Directory":"/\n├── .git/                  # Git repository data\n├── .github/               # GitHub specific files (workflows, templates)\n├── .gitignore             # Git ignore rules\n├── README.md              # Project overview and basic documentation\n├── eslint.config.mjs      # ESLint configuration\n├── next.config.ts         # Next.js configuration\n├── node_modules/          # Node.js dependencies\n├── package-lock.json      # Dependency lock file\n├── package.json           # Project metadata and dependencies\n├── postcss.config.mjs     # PostCSS configuration\n├── public/                # Static assets\n├── src/                   # Source code\n└── tsconfig.json          # TypeScript configuration","source-directory-src#Source Directory (/src)":"The src directory contains all the application source code, organized as follows:\nsrc/\n├── app/                  # Next.js App Router components and routes\n├── assets/               # Non-public assets (SVGs, images used in components)\n├── components/           # Reusable UI components\n├── libs/                 # Utility libraries and external integrations\n├── styles/               # Global styles and style utilities\n└── utils/                # Helper functions and utilities","app-directory-srcapp#App Directory (/src/app)":"The app directory follows Next.js 13+ App Router structure:\napp/\n├── auth/                # Authentication related pages\n├── dashboard/           # Dashboard related pages and components\n├── favicon.ico          # Website favicon\n├── globals.css          # Global CSS styles\n├── layout.tsx           # Root layout component\n└── page.tsx             # Homepage component","dashboard-directory-srcappdashboard#Dashboard Directory (/src/app/dashboard)":"The dashboard section contains:\ndashboard/\n├── _components/         # Dashboard-specific components\n└── [other files]        # Dashboard pages and layouts","component-organization#Component Organization":"Components in Yamify follow these organizational principles:\nGlobal Components: Reusable across the entire application (/src/components/)\nFeature-specific Components: Used within specific features (/src/app/[feature]/_components/)\nPage Components: The main component for a specific route (/src/app/[route]/page.tsx)","style-organization#Style Organization":"Yamify uses a combination of:\nTailwindCSS for utility-based styling\nGlobal CSS in src/app/globals.css\nComponent-specific styling when needed","data-flow#Data Flow":"The application follows a typical Next.js data flow pattern:\nData fetching in server components\nPassing data down to client components as props\nClient-side state management for interactive elements\nFor more details on specific aspects of the architecture, see:\nData Flow\nTechnologies\nDesign Patterns"}},"/api-docs/overview":{"title":"API Overview - Yamify","data":{"":"This section provides comprehensive documentation for Yamify's APIs. Whether you're integrating with Yamify or developing new features, this guide will help you understand our API structure, authentication mechanisms, and available endpoints.","api-architecture#API Architecture":"Yamify implements a RESTful API architecture, with endpoints organized around resources. The API follows these principles:\nUses standard HTTP methods (GET, POST, PUT, DELETE)\nReturns JSON responses\nUses consistent error handling patterns\nImplements proper status codes\nRequires authentication via JWT tokens","base-url#Base URL":"All API requests should be made to the following base URL:\nhttps://api.yamify.com/v1\nFor development and testing, you can use:\nhttp://localhost:3000/api/v1","request-format#Request Format":"Requests with a body should be sent with the Content-Type header set to application/json and the body formatted as JSON.\nPOST /api/v1/resource HTTP/1.1\nHost: api.yamify.com\nContent-Type: application/json\nAuthorization: Bearer <token>\n{\n  \"key\": \"value\"\n}","response-format#Response Format":"All responses are returned in JSON format with the following structure:\n{\n  \"status\": \"success\",\n  \"data\": {\n    // Response data here\n  },\n  \"message\": \"Optional message\"\n}\nFor error responses:\n{\n  \"status\": \"error\",\n  \"error\": {\n    \"code\": \"ERROR_CODE\",\n    \"message\": \"Error message\"\n  }\n}","rate-limiting#Rate Limiting":"The API implements rate limiting to protect against abuse. The current limits are:\n100 requests per minute for authenticated users\n20 requests per minute for unauthenticated users\nRate limit information is included in the response headers:\nX-RateLimit-Limit: 100\nX-RateLimit-Remaining: 99\nX-RateLimit-Reset: 1625097601","pagination#Pagination":"For endpoints that return multiple items, pagination is supported through the following query parameters:\npage: Page number (default: 1)\nlimit: Number of items per page (default: 20, max: 100)\nPaginated responses include metadata:\n{\n  \"status\": \"success\",\n  \"data\": [...],\n  \"pagination\": {\n    \"current_page\": 1,\n    \"total_pages\": 5,\n    \"total_items\": 100,\n    \"items_per_page\": 20\n  }\n}","api-versioning#API Versioning":"The Yamify API is versioned to ensure backward compatibility. The current version is v1.API versions are specified in the URL path (e.g., /api/v1/resource).","next-steps#Next Steps":"Explore the following sections to learn more about specific aspects of the Yamify API:\nAPI Endpoints\nData Models\nAuthentication"}},"/api-docs/data-models":{"title":"Data Models - Yamify API","data":{"":"This page documents the core data models used in the Yamify API. Understanding these models is essential for effectively working with the API endpoints.","user#User":"The User model represents a registered user in the system.\ninterface User {\n  id: string;           // Unique identifier for the user\n  username: string;     // User's username\n  email: string;        // User's email address\n  name?: string;        // User's full name (optional)\n  avatar?: string;      // URL to user's avatar image (optional)\n  role: 'user' | 'admin'; // User's role in the system\n  createdAt: string;    // ISO date string of when the user was created\n  updatedAt: string;    // ISO date string of when the user was last updated\n}","example#Example":"{\n  \"id\": \"usr_12345\",\n  \"username\": \"johndoe\",\n  \"email\": \"john@example.com\",\n  \"name\": \"John Doe\",\n  \"avatar\": \"https://example.com/avatars/johndoe.jpg\",\n  \"role\": \"user\",\n  \"createdAt\": \"2023-01-15T08:30:00Z\",\n  \"updatedAt\": \"2023-05-20T14:15:30Z\"\n}","project#Project":"The Project model represents a user project within Yamify.\ninterface Project {\n  id: string;             // Unique identifier for the project\n  name: string;           // Project name\n  description?: string;   // Project description (optional)\n  ownerId: string;        // ID of the user who owns the project\n  collaborators: string[]; // Array of user IDs who are collaborators\n  status: 'active' | 'archived' | 'deleted'; // Project status\n  settings: ProjectSettings; // Project-specific settings\n  createdAt: string;      // ISO date string of when the project was created\n  updatedAt: string;      // ISO date string of when the project was last updated\n}\ninterface ProjectSettings {\n  theme: 'light' | 'dark' | 'system'; // Project UI theme\n  visibility: 'public' | 'private'; // Project visibility\n  notifications: boolean; // Whether notifications are enabled\n  // Additional project-specific settings\n}","example-1#Example":"{\n  \"id\": \"prj_67890\",\n  \"name\": \"Marketing Website Redesign\",\n  \"description\": \"Project to redesign the company marketing website\",\n  \"ownerId\": \"usr_12345\",\n  \"collaborators\": [\"usr_54321\", \"usr_98765\"],\n  \"status\": \"active\",\n  \"settings\": {\n    \"theme\": \"light\",\n    \"visibility\": \"private\",\n    \"notifications\": true\n  },\n  \"createdAt\": \"2023-06-01T10:00:00Z\",\n  \"updatedAt\": \"2023-06-15T16:45:20Z\"\n}","task#Task":"The Task model represents an individual task within a project.\ninterface Task {\n  id: string;              // Unique identifier for the task\n  projectId: string;       // ID of the project this task belongs to\n  title: string;           // Task title\n  description?: string;    // Task description (optional)\n  status: 'todo' | 'in_progress' | 'review' | 'done'; // Task status\n  priority: 'low' | 'medium' | 'high' | 'urgent'; // Task priority\n  assigneeId?: string;     // ID of the user assigned to the task (optional)\n  creatorId: string;       // ID of the user who created the task\n  dueDate?: string;        // ISO date string of when the task is due (optional)\n  tags: string[];          // Array of tags associated with the task\n  attachments: Attachment[]; // Array of attachments\n  createdAt: string;       // ISO date string of when the task was created\n  updatedAt: string;       // ISO date string of when the task was last updated\n}\ninterface Attachment {\n  id: string;              // Unique identifier for the attachment\n  filename: string;        // Original filename\n  url: string;             // URL to access the file\n  size: number;            // File size in bytes\n  mimeType: string;        // MIME type of the file\n  uploadedAt: string;      // ISO date string of when the file was uploaded\n  uploadedBy: string;      // ID of the user who uploaded the file\n}","example-2#Example":"{\n  \"id\": \"tsk_54321\",\n  \"projectId\": \"prj_67890\",\n  \"title\": \"Design new homepage layout\",\n  \"description\": \"Create a modern, responsive design for the homepage following the new brand guidelines\",\n  \"status\": \"in_progress\",\n  \"priority\": \"high\",\n  \"assigneeId\": \"usr_54321\",\n  \"creatorId\": \"usr_12345\",\n  \"dueDate\": \"2023-06-30T23:59:59Z\",\n  \"tags\": [\"design\", \"homepage\", \"responsive\"],\n  \"attachments\": [\n    {\n      \"id\": \"att_11111\",\n      \"filename\": \"design_mockup_v1.psd\",\n      \"url\": \"https://example.com/files/design_mockup_v1.psd\",\n      \"size\": 15728640,\n      \"mimeType\": \"application/photoshop\",\n      \"uploadedAt\": \"2023-06-10T14:30:00Z\",\n      \"uploadedBy\": \"usr_12345\"\n    }\n  ],\n  \"createdAt\": \"2023-06-05T09:15:00Z\",\n  \"updatedAt\": \"2023-06-12T11:30:45Z\"\n}","comment#Comment":"The Comment model represents a comment on a task.\ninterface Comment {\n  id: string;           // Unique identifier for the comment\n  taskId: string;       // ID of the task this comment belongs to\n  authorId: string;     // ID of the user who wrote the comment\n  content: string;      // Comment text content\n  attachments: Attachment[]; // Array of attachments\n  mentions: string[];   // Array of user IDs mentioned in the comment\n  createdAt: string;    // ISO date string of when the comment was created\n  updatedAt: string;    // ISO date string of when the comment was last updated\n  edited: boolean;      // Whether the comment has been edited\n}","example-3#Example":"{\n  \"id\": \"cmt_98765\",\n  \"taskId\": \"tsk_54321\",\n  \"authorId\": \"usr_12345\",\n  \"content\": \"I've completed the first draft of the design. @usr_54321 could you please review it?\",\n  \"attachments\": [\n    {\n      \"id\": \"att_22222\",\n      \"filename\": \"homepage_draft1.jpg\",\n      \"url\": \"https://example.com/files/homepage_draft1.jpg\",\n      \"size\": 2097152,\n      \"mimeType\": \"image/jpeg\",\n      \"uploadedAt\": \"2023-06-15T10:45:00Z\",\n      \"uploadedBy\": \"usr_12345\"\n    }\n  ],\n  \"mentions\": [\"usr_54321\"],\n  \"createdAt\": \"2023-06-15T10:45:30Z\",\n  \"updatedAt\": \"2023-06-15T10:45:30Z\",\n  \"edited\": false\n}","activity#Activity":"The Activity model represents an activity or event that occurred in the system.\ninterface Activity {\n  id: string;           // Unique identifier for the activity\n  type: ActivityType;   // Type of activity\n  actorId: string;      // ID of the user who performed the action\n  resourceType: 'project' | 'task' | 'comment'; // Type of resource affected\n  resourceId: string;   // ID of the affected resource\n  metadata: Record<string, any>; // Additional data about the activity\n  timestamp: string;    // ISO date string of when the activity occurred\n}\ntype ActivityType = \n  | 'created'\n  | 'updated'\n  | 'deleted'\n  | 'commented'\n  | 'assigned'\n  | 'status_changed'\n  | 'completed';","example-4#Example":"{\n  \"id\": \"act_44444\",\n  \"type\": \"status_changed\",\n  \"actorId\": \"usr_54321\",\n  \"resourceType\": \"task\",\n  \"resourceId\": \"tsk_54321\",\n  \"metadata\": {\n    \"previousStatus\": \"todo\",\n    \"newStatus\": \"in_progress\"\n  },\n  \"timestamp\": \"2023-06-12T11:30:45Z\"\n}","error-responses#Error Responses":"Error responses from the API follow a standardized format:\ninterface ErrorResponse {\n  status: 'error';\n  error: {\n    code: string;       // Error code\n    message: string;    // Human-readable error message\n    details?: any;      // Additional error details (optional)\n  };\n}","example-5#Example":"{\n  \"status\": \"error\",\n  \"error\": {\n    \"code\": \"UNAUTHORIZED\",\n    \"message\": \"Authentication required to access this resource\"\n  }\n}","common-query-parameters#Common Query Parameters":"Many API endpoints that return collections support the following query parameters:\ninterface PaginationParams {\n  page?: number;         // Page number (1-based)\n  limit?: number;        // Number of items per page\n  sortBy?: string;       // Field to sort by\n  sortOrder?: 'asc' | 'desc'; // Sort direction\n}\ninterface FilterParams {\n  [key: string]: string | number | boolean | string[];\n}","related-information#Related Information":"For details on how to use these models with API endpoints, see the API Endpoints page.\nFor authentication information, see the Authentication page."}}}